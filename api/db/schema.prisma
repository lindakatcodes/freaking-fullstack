// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int          @id @default(autoincrement())
  email               String       @unique
  displayName         String?      @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime     @default(now())
  youtube             String?
  linkedin            String?
  github              String?
  twitch              String?
  bluesky             String?
  website             String?
  sharedLinks         SharedLink[]
  comments            Comment[]
  linkVotes           LinkUserVote[]
  commentVotes        CommentUserVote[]
}

model SharedLink {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String
  url           String
  points        Int      @default(0)
  submittedBy   User     @relation(fields: [submittedById], references: [id])
  submittedById Int
  comments      Comment[]
  linkVotes     LinkUserVote[]
}

model Comment {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  body          String
  authorId      Int
  author        User @relation(fields: [authorId], references: [id])
  linkId        String
  link          SharedLink @relation(fields: [linkId], references: [id])
  commentVotes  CommentUserVote[]
}

model LinkUserVote {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  linkId        String
  link          SharedLink @relation(fields: [linkId], references: [id])
  userId        Int
  user          User @relation(fields: [userId], references: [id])
}

model CommentUserVote {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  commentId     String
  comment       Comment @relation(fields: [commentId], references: [id])
  userId        Int
  user          User @relation(fields: [userId], references: [id])
}